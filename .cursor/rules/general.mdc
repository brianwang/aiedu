---
alwaysApply: true
---
# AI智能教育平台开发规范

## 1. 代码规范

### 后端开发规范
- 使用FastAPI框架，遵循RESTful API设计原则
- 所有API需要添加详细的文档注释
- 必须进行异常处理和日志记录
- 使用SQLAlchemy进行数据库操作
- AI相关功能需要实现降级策略和缓存机制

### 前端开发规范
- 使用Vue3 + TypeScript + Vite技术栈
- 组件采用Composition API风格
- 实现响应式设计，支持多端适配
- 使用Pinia进行状态管理
- 遵循组件化和模块化开发原则

## 2. 数据库规范

### 命名规范
- 表名使用小写字母，单词间用下划线连接
- 主键统一使用id命名
- 外键命名格式：关联表名_id
- 创建和更新时间字段：created_at, updated_at

### 字段规范
- 所有表必须包含id, created_at, updated_at字段
- 使用软删除机制，添加is_deleted字段
- 敏感数据必须加密存储

## 3. AI功能规范

### AI模型使用
- 优先使用DeepSeek模型
- 实现多模型切换机制
- 必须实现请求缓存
- 设置合理的超时时间
- 实现完善的降级策略

### AI响应处理
- 统一使用JSON格式
- 必须进行响应验证
- 实现错误重试机制
- 保存AI调用日志

## 4. 用户管理规范

### 用户认证
- 使用JWT进行身份认证
- Token有效期设置为24小时
- 实现Token刷新机制
- 敏感操作需要二次验证

### 权限控制
- 实现RBAC权限模型
- 细粒度的API权限控制
- 操作日志记录

## 5. 开发流程规范

### 版本控制
- 使用Git进行版本控制
- 遵循Git Flow工作流
- 提交信息需要清晰描述改动

### 测试规范
- 编写单元测试和集成测试
- API测试覆盖率要求80%以上
- 前端组件测试覆盖率要求60%以上

### 部署规范
- 使用Docker容器化部署
- 配置文件使用环境变量
- 实现自动化部署流程

## 6. 文档规范

### 代码文档
- 所有函数必须添加文档注释
- API接口需要详细的参数说明
- 复杂逻辑需要添加流程说明

### 项目文档
- 维护完整的README文档
- 提供详细的部署文档
- 记录项目架构设计文档
- 保持文档的及时更新

## 7. 安全规范

### 数据安全
- 敏感数据加密存储
- 实现数据备份机制
- 定期安全审计

### 接口安全
- 实现请求频率限制
- 防止SQL注入
- 防止XSS攻击
- 实现CORS安全配置

## 8. 性能规范

### 后端性能
- API响应时间控制在200ms以内
- 实现数据库查询优化
- 合理使用缓存机制
- 大量数据处理使用异步任务

### 前端性能
- 页面加载时间控制在3秒内
- 实现组件懒加载
- 图片资源优化
- 合理使用浏览器缓存
